// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/grafana/grafana/pkg/services/screenshot (interfaces: CaptureService)

// Package screenshot is a generated GoMock package.
package screenshot

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCaptureService is a mock of CaptureService interface.
type MockCaptureService struct {
	ctrl     *gomock.Controller
	recorder *MockCaptureServiceMockRecorder
}

// MockCaptureServiceMockRecorder is the mock recorder for MockCaptureService.
type MockCaptureServiceMockRecorder struct {
	mock *MockCaptureService
}

// NewMockCaptureService creates a new mock instance.
func NewMockCaptureService(ctrl *gomock.Controller) *MockCaptureService {
	mock := &MockCaptureService{ctrl: ctrl}
	mock.recorder = &MockCaptureServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaptureService) EXPECT() *MockCaptureServiceMockRecorder {
	return m.recorder
}

// Screenshot mocks base method.
func (m *MockCaptureService) Screenshot(arg0 context.Context, arg1 ScreenshotOptions) (*Screenshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Screenshot", arg0, arg1)
	ret0, _ := ret[0].(*Screenshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Screenshot indicates an expected call of Screenshot.
func (mr *MockCaptureServiceMockRecorder) Screenshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Screenshot", reflect.TypeOf((*MockCaptureService)(nil).Screenshot), arg0, arg1)
}
