// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/grafana/grafana/pkg/services/screenshot (interfaces: SingleFlight)

// Package screenshot is a generated GoMock package.
package screenshot

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSingleFlight is a mock of SingleFlight interface.
type MockSingleFlight struct {
	ctrl     *gomock.Controller
	recorder *MockSingleFlightMockRecorder
}

// MockSingleFlightMockRecorder is the mock recorder for MockSingleFlight.
type MockSingleFlightMockRecorder struct {
	mock *MockSingleFlight
}

// NewMockSingleFlight creates a new mock instance.
func NewMockSingleFlight(ctrl *gomock.Controller) *MockSingleFlight {
	mock := &MockSingleFlight{ctrl: ctrl}
	mock.recorder = &MockSingleFlightMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSingleFlight) EXPECT() *MockSingleFlightMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockSingleFlight) Do(arg0 context.Context, arg1 ScreenshotOptions, arg2 captureFunc) (*Screenshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Screenshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockSingleFlightMockRecorder) Do(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockSingleFlight)(nil).Do), arg0, arg1, arg2)
}
