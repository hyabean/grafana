// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/grafana/grafana/pkg/services/screenshot (interfaces: TokenBucket)

// Package screenshot is a generated GoMock package.
package screenshot

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTokenBucket is a mock of TokenBucket interface.
type MockTokenBucket struct {
	ctrl     *gomock.Controller
	recorder *MockTokenBucketMockRecorder
}

// MockTokenBucketMockRecorder is the mock recorder for MockTokenBucket.
type MockTokenBucketMockRecorder struct {
	mock *MockTokenBucket
}

// NewMockTokenBucket creates a new mock instance.
func NewMockTokenBucket(ctrl *gomock.Controller) *MockTokenBucket {
	mock := &MockTokenBucket{ctrl: ctrl}
	mock.recorder = &MockTokenBucketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenBucket) EXPECT() *MockTokenBucketMockRecorder {
	return m.recorder
}

// Done mocks base method.
func (m *MockTokenBucket) Done() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Done")
}

// Done indicates an expected call of Done.
func (mr *MockTokenBucketMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockTokenBucket)(nil).Done))
}

// Get mocks base method.
func (m *MockTokenBucket) Get(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTokenBucketMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTokenBucket)(nil).Get), arg0)
}
